import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.NoSuchElementException;

interface Stack<E> {

    // Elementi na stekot se objekti od proizvolen tip.

    // Metodi za pristap:

    public boolean isEmpty ();
    	// Vrakja true ako i samo ako stekot e prazen.

    public E peek ();
    	// Go vrakja elementot na vrvot od stekot.

    // Metodi za transformacija:

    public void clear ();
    	// Go prazni stekot.

    public void push (E x);
    	// Go dodava x na vrvot na stekot.

    public E pop ();
    	// Go otstranuva i vrakja elementot shto e na vrvot na stekot.
}

class ArrayStack<E> implements Stack<E> {
    private E[] elems;
    private int depth;

    @SuppressWarnings("unchecked")
    public ArrayStack (int maxDepth) {
        // Konstrukcija na nov, prazen stek.
        elems = (E[]) new Object[maxDepth];
        depth = 0;
    }


    public boolean isEmpty () {
        // Vrakja true ako i samo ako stekot e prazen.
        return (depth == 0);
    }


    public E peek () {
        // Go vrakja elementot na vrvot od stekot.
        if (depth == 0)
            throw new NoSuchElementException();
        return elems[depth-1];
    }


    public void clear () {
        // Go prazni stekot.
        for (int i = 0; i < depth; i++)  elems[i] = null;
        depth = 0;
    }


    public void push (E x) {
        // Go dodava x na vrvot na stekot.
        elems[depth++] = x;
    }


    public E pop () {
        // Go otstranuva i vrakja elementot shto e na vrvot na stekot.
        if (depth == 0)
            throw new NoSuchElementException();
        E topmost = elems[--depth];
        elems[depth] = null;
        return topmost;
    }
}


public class CheckXML {

	public static boolean daliSoodvetni (String opened, String closed)
	{
	    int i;
	    for(i=1;(i<opened.length())&&(i<(closed.length()-1));i++)
	       if(opened.charAt(i)!= closed.charAt(i+1))
	           return false;  
	    return true;
	}
	
   
	public static void main(String[] args) throws Exception{
          
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));  
        String s = br.readLine();
		int n = Integer.parseInt(s);
		String [] redovi = new String[n];
	
		for(int i=0;i<n;i++)
			redovi[i] = br.readLine();
       
		ArrayStack<String> tagStack = new ArrayStack<String>(1000);
    	String cur, opened; int valid=1;
        for (int i = 0; i < n; i++)
        {
            cur=redovi[i];
            if((cur.length())>=3&&cur.charAt(0)=='['&&cur.charAt(1)!='/'&&cur.charAt((cur.length())-1)==']')
            {
                 tagStack.push(cur);
                 //System.out.println("Stavam na stek"+cur);
                 
            }
            else if(cur.length()>=4 && cur.charAt(0)=='[' && cur.charAt(1)=='/' && cur.charAt((cur.length())-1)==']')   
            {
                 if(tagStack.isEmpty()) 
                 {   
                     valid=0;
                     break;
                 }
                 opened=tagStack.pop();
                 //System.out.println("Vadam od stek"+cur);
                 
                 if (!daliSoodvetni(opened, cur)) 
    	         {
                     valid=0;
                     //System.out.println("Bla bla "+cur+" "+opened);
                     break;
                 }
            }
        }
        System.out.println(valid);
        
        br.close();
	}
}
