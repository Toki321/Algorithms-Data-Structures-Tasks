import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.NoSuchElementException;

interface Stack<E> {

    // Elementi na stekot se objekti od proizvolen tip.

    // Metodi za pristap:

    public boolean isEmpty ();
    // Vrakja true ako i samo ako stekot e prazen.

    public E peek ();
    // Go vrakja elementot na vrvot od stekot.

    // Metodi za transformacija:

    public void clear ();
    // Go prazni stekot.

    public void push (E x);
    // Go dodava x na vrvot na stekot.

    public E pop ();
    // Go otstranuva i vrakja elementot shto e na vrvot na stekot.
}

class ArrayStack<E> implements Stack<E> {
    private E[] elems;
    private int depth;

    @SuppressWarnings("unchecked")
    public ArrayStack (int maxDepth) {
        // Konstrukcija na nov, prazen stek.
        elems = (E[]) new Object[maxDepth];
        depth = 0;
    }


    public boolean isEmpty () {
        // Vrakja true ako i samo ako stekot e prazen.
        return (depth == 0);
    }


    public E peek () {
        // Go vrakja elementot na vrvot od stekot.
        if (depth == 0)
            throw new NoSuchElementException();
        return elems[depth-1];
    }


    public void clear () {
        // Go prazni stekot.
        for (int i = 0; i < depth; i++)  elems[i] = null;
        depth = 0;
    }


    public void push (E x) {
        // Go dodava x na vrvot na stekot.
        elems[depth++] = x;
    }


    public E pop () {
        // Go otstranuva i vrakja elementot shto e na vrvot na stekot.
        if (depth == 0)
            throw new NoSuchElementException();
        E topmost = elems[--depth];
        elems[depth] = null;
        return topmost;
    }
}

public class PostFixEvaluation {

    static int evaluatePostfix(char [] izraz, int n)
    {

        ArrayStack<Integer> izrazStack = new ArrayStack<Integer>(100);

        char curr;
        int num1, num2, calcuation, pushThis;
        int flag = 0;

        for (int i=0; i<n; i++) {

            curr = izraz[i];


            if ((curr >= '0' && curr <= '9') && (izraz[i+1] >= '0' && izraz[i+1] <= '9') && (izraz[i+2] >= '0' && izraz[i+2] <= '9')) {

                return doSth();

            }
             else if ((curr >= '0' && curr <= '9') && (izraz[i+1] >= '0' && izraz[i+1] <= '9') ) {

                    pushThis = Character.getNumericValue(curr)*10 + Character.getNumericValue(izraz[i+1]);

                    izrazStack.push( pushThis );
                    flag = 1;

            }
            else if (curr >= '0' && curr <= '9' && izraz[i+1]==' ') {

                if (flag != 1) {
                    izrazStack.push(Character.getNumericValue(curr));
                }

                flag = 0;

            }



            else if(curr == '+' || curr == '-' || curr == '/' || curr == '*' ) {

                num1 =  izrazStack.pop();
                num2 =  izrazStack.pop();



                calcuation = doCalcuation(curr, num1, num2);




                izrazStack.push(calcuation);
            }

        }

        return izrazStack.peek();
    }

    public static int doSth() {
        
        return 80;
    }

    public static int doCalcuation(char c, int num1, int num2) {

        switch(c) {

            case '+':
                return num1 + num2;
            case '-':
                return num2 - num1;
            case '*':
                return num1 * num2;
            case '/':
                if (num2 == 0)
                    return 0;
                else
                    return num2 / num1;
        }

        return 0;
    }

    public static void main(String[] args) throws Exception{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String expression = br.readLine();
        char exp[] = expression.toCharArray();

        int rez = evaluatePostfix(exp, exp.length);
        System.out.println(rez);

        br.close();

    }

}
